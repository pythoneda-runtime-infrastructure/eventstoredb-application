# vim: set fileencoding=utf-8
"""
pythoneda/runtime/infrastructure/eventstoredb/application/eventstoredb_app.py

This file can be used to run pythoneda-runtime-infrastructure/eventstoredb

Copyright (C) 2024-today rydnr's pythoneda-runtime-infrastructure/eventstoredb-application

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""
import asyncio
from pythoneda.runtime.infrastructure.eventstoredb import EventStoreDB
from pythoneda.runtime.infrastructure.eventstoredb.infrastructure.cli import (
    EventstoredbOptionsCli,
)
from pythoneda.runtime.infrastructure.eventstoredb.infrastructure.dbus import (
    EventstoredbDbusSignalEmitter,
)
from pythoneda.shared.application import enable, PythonEDA
from pythoneda.runtime.infrastructure.eventstoredb.infrastructure.dbus import (
    EventstoredbDbusSignalListener,
)
from typing import Dict


@enable(EventstoredbDbusSignalEmitter)
@enable(EventstoredbDbusSignalListener)
@enable(EventstoredbOptionsCli)
class EventstoredbApp(PythonEDA):
    """
    Runs EventStoreDB infrastructure domain.

    Class name: EventstoredbApp

    Responsibilities:
        - Runs EventStoreDB infrastructure domain.

    Collaborators:
        - Command-line handlers from pythoneda-runtime-infrastructure/eventstoredb-infrastructure
    """

    def __init__(self):
        """
        Creates a new EventstoredbApp instance.
        """
        # boot_banner is automatically generated by pythoneda-runtime-infrastructure-def/eventstoredb-application
        try:
            from pythoneda.runtime.infrastructure.eventstoredb.application.eventstoredb_banner import (
                BootBanner,
            )

            banner = EventstoredbBanner()
        except ImportError:
            banner = None
        super().__init__(banner, __file__)

    async def accept_eventstoredb_options(self, options: Dict):
        """
        Annotates the EventStoreDB options.
        :param options: Such options.
        :type options: Dict
        """
        booted = EventStoreDB.listen_EventstoredbBootRequested(
            EventstoredbBootRequested(options)
        )
        if booted:
            self.emit(booted)


if __name__ == "__main__":
    asyncio.run(
        EventstoredbApp.main(
            "pythoneda.runtime.infrastructure.eventstoredb.application.EventstoredbApp"
        )
    )

# vim: syntax=python ts=4 sw=4 sts=4 tw=79 sr et
# Local Variables:
# mode: python
# python-indent-offset: 4
# tab-width: 4
# indent-tabs-mode: nil
# fill-column: 79
# End:
